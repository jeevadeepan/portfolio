[{"C:\\Users\\Jeeva\\code\\portfolio\\src\\index.tsx":"1","C:\\Users\\Jeeva\\code\\portfolio\\src\\reportWebVitals.ts":"2","C:\\Users\\Jeeva\\code\\portfolio\\src\\App.tsx":"3","C:\\Users\\Jeeva\\code\\portfolio\\src\\challenges\\pomodoro\\Pomodoro.tsx":"4","C:\\Users\\Jeeva\\code\\portfolio\\src\\challenges\\pomodoro\\progressring\\ProgressRing.tsx":"5","C:\\Users\\Jeeva\\code\\portfolio\\src\\challenges\\pomodoro\\settings\\Settings.tsx":"6","C:\\Users\\Jeeva\\code\\portfolio\\src\\challenges\\pomodoro\\timer\\Timer.tsx":"7","C:\\Users\\Jeeva\\code\\portfolio\\src\\hooks.tsx":"8","C:\\Users\\Jeeva\\code\\portfolio\\src\\challenges\\pomodoro\\tabs\\Tabs.tsx":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":656,"mtime":1612128132103,"results":"13","hashOfConfig":"11"},{"size":2002,"mtime":1613447727896,"results":"14","hashOfConfig":"11"},{"size":913,"mtime":1612145765387,"results":"15","hashOfConfig":"11"},{"size":2941,"mtime":1612720197879,"results":"16","hashOfConfig":"11"},{"size":2728,"mtime":1613324749441,"results":"17","hashOfConfig":"11"},{"size":546,"mtime":1613311892390,"results":"18","hashOfConfig":"11"},{"size":1229,"mtime":1613452057826,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"iwjmau",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Jeeva\\code\\portfolio\\src\\index.tsx",[],["42","43"],"C:\\Users\\Jeeva\\code\\portfolio\\src\\reportWebVitals.ts",[],"C:\\Users\\Jeeva\\code\\portfolio\\src\\App.tsx",[],"C:\\Users\\Jeeva\\code\\portfolio\\src\\challenges\\pomodoro\\Pomodoro.tsx",["44"],"C:\\Users\\Jeeva\\code\\portfolio\\src\\challenges\\pomodoro\\progressring\\ProgressRing.tsx",["45"],"import React, { useState } from 'react';\r\nimport './ProgressRing.scss';\r\n\r\nfunction ProgressRing(props: any) {\r\n    const { radius, stroke, progress } = props;\r\n    const normalizedRadius = (radius - stroke * 2);\r\n    const circumference = normalizedRadius * 2 * Math.PI;\r\n    const strokeDashoffset = circumference - (progress / 100 * circumference);\r\n\r\n    return (\r\n        <svg\r\n            height={radius * 2}\r\n            width={radius * 2}\r\n        >\r\n            <circle\r\n                stroke=\"#F87070\"\r\n                fill=\"transparent\"\r\n                strokeWidth={stroke}\r\n                strokeDasharray={circumference + ' ' + circumference}\r\n                strokeLinecap=\"round\"\r\n                style={{ strokeDashoffset }}\r\n                r={normalizedRadius}\r\n                cx={radius}\r\n                cy={radius}\r\n            />\r\n        </svg>\r\n    );\r\n}\r\n\r\nexport default ProgressRing;","C:\\Users\\Jeeva\\code\\portfolio\\src\\challenges\\pomodoro\\settings\\Settings.tsx",["46","47","48"],"import React, { useState } from 'react';\r\nimport './Settings.scss';\r\nimport CloseIcon from '../assets/img/icon-close.svg';\r\nimport TickIcon from '../assets/img/icon-tick.svg';\r\n\r\nfunction Settings(props: any) {\r\n\r\n    const [pdTimer, setPdTimer] = useState(25);\r\n    const [sbTimer, setSbTimer] = useState(5);\r\n    const [lbTimer, setLbTimer] = useState(15);\r\n    const settingsApplyHandler = () => { };\r\n    return (\r\n        <div className=\"pd-settings-overlay\">\r\n            <div className='pd-settings' role='dialog' aria-labelledby='pd-settings-title'>\r\n                <div className='pd-settings-header'>\r\n                    <h2 id='pd-settings-title'>Settings</h2>\r\n                    <button id='pd-settings-close'><img src={CloseIcon} alt=\"Close Settings\" onClick={props.closeHandler.bind(null, false)} /></button>\r\n                </div>\r\n                <form onSubmit={settingsApplyHandler}>\r\n                    <fieldset className='pd-timer-fs'>\r\n                        <h3 className='pd-time-heading'>Time (Minutes)</h3>\r\n                        <div className=\"pd-timer-container\">\r\n                            <label>pomodoro\r\n                                <input type=\"number\" value={pdTimer}/>\r\n                            </label>\r\n                            <label>short break\r\n                                <input type=\"number\" value={sbTimer}/>\r\n                            </label>\r\n                            <label>long break\r\n                                <input type=\"number\" value={lbTimer}/>\r\n                            </label>\r\n                        </div>\r\n                    </fieldset>\r\n                    <fieldset>\r\n                        <h3 id='pd-font-label'>Font</h3>\r\n                        <ul className=\"pd-font-options\" role='radiogroup' aria-labelledby='pd-font-label'>\r\n                            <li className=\"pd-font-option selected\">Aa</li>\r\n                            <li className=\"pd-font-option\">Aa</li>\r\n                            <li className=\"pd-font-option\">Aa</li>\r\n                        </ul>\r\n                    </fieldset>\r\n                    <fieldset className='pd-color-fs'>\r\n                        <h3 id='pd-color-label'>Color</h3>\r\n                        <ul className=\"pd-color-options\" role='radiogroup' aria-labelledby='pd-color-label'>\r\n                            <li className=\"pd-color-option\" style={{backgroundColor: '#F87070'}}><img src={TickIcon} alt=\"Close Settings\" /></li>\r\n                            <li className=\"pd-color-option\" style={{backgroundColor: '#70F3F8'}}></li>\r\n                            <li className=\"pd-color-option\" style={{backgroundColor: '#D881F8'}}></li>\r\n                        </ul>\r\n                    </fieldset>\r\n                    <button type=\"submit\" id='pd-settings-apply-btn'>Apply</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Settings;","C:\\Users\\Jeeva\\code\\portfolio\\src\\challenges\\pomodoro\\timer\\Timer.tsx",["49","50","51"],"import { time } from 'console';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useInterval } from '../../../hooks';\r\nimport ProgressRing from '../progressring/ProgressRing';\r\nimport './Timer.scss';\r\n\r\nenum TimerState {\r\n  ready, running, stopped, complete\r\n}\r\n\r\ntype TimerProps = {\r\n  time: number\r\n};\r\n\r\nfunction Timer(props: TimerProps) {\r\n  const [elapsedTime, setElapsedTime] = useState(0);\r\n  const [currState, setCurrState] = useState(TimerState.ready);\r\n  const [startTime, setStartTime] = useState<number|any>();\r\n  const [minRem, setMinRem] = useState(props.time);\r\n  const [secRem, setSecRem] = useState(0);\r\n  const [triggerBtn, setTriggerBtn] = useState('start');\r\n  const [pauseStart, setPauseStart] = useState<any>();\r\n  const [breakTime, setBreakTime] = useState<any>(0);\r\n  const [totalTime, setTotalTime] = useState(props.time * 60);\r\n\r\n  const timeChecker = () => {\r\n    const dt = (Date.now() - startTime - breakTime);\r\n    const elapsed = Math.floor( dt/ 1000);\r\n    setElapsedTime(elapsed);\r\n  };\r\n\r\n  useInterval(timeChecker, currState === TimerState.running ? 1000 : null);\r\n  // start, stop\r\n  const triggerHandler = () => {\r\n    // if current timer state is ready, initialize a new timer;\r\n    if(currState === TimerState.ready || currState === TimerState.complete) {\r\n      setStartTime(Date.now());\r\n      setElapsedTime(0);\r\n      setBreakTime(0);\r\n      setCurrState(TimerState.running);\r\n      setTriggerBtn('stop');\r\n    }\r\n    if(currState === TimerState.stopped) {\r\n      setBreakTime(breakTime + (Date.now() - pauseStart));\r\n      setCurrState(TimerState.running);\r\n      setTriggerBtn('stop');\r\n    }\r\n    if(currState === TimerState.running) {\r\n      setPauseStart(Date.now());\r\n      setCurrState(TimerState.stopped);\r\n      setTriggerBtn('start');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if(currState === TimerState.running) {\r\n      const rem = totalTime - elapsedTime;\r\n      const min = rem < 60 ? 0 : Math.floor(rem/60);\r\n      const sec = rem%60;\r\n      if(rem === 0) {\r\n        // stop timer\r\n        setCurrState(TimerState.complete);\r\n        setTriggerBtn('start');\r\n      }\r\n      setMinRem(min);\r\n      setSecRem(sec);\r\n    }\r\n  }, [elapsedTime, currState]);\r\n\r\n  return (\r\n    <div className=\"timer\">\r\n      <div className=\"timer-display\">\r\n        <div className=\"inner-container\">\r\n          <ProgressRing radius={169.5} stroke={8} progress={100 - Math.floor(elapsedTime / totalTime * 100)} />\r\n          <span className=\"timer-time\">{minRem}:{secRem < 10 ? `0${secRem}` : secRem}</span>\r\n          <button className=\"timer-trigger-btn\" onClick={triggerHandler}>{triggerBtn}</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Timer;","C:\\Users\\Jeeva\\code\\portfolio\\src\\hooks.tsx",[],"C:\\Users\\Jeeva\\code\\portfolio\\src\\challenges\\pomodoro\\tabs\\Tabs.tsx",["52"],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":3,"column":8,"nodeType":"59","messageId":"60","endLine":3,"endColumn":20},{"ruleId":"57","severity":1,"message":"61","line":1,"column":17,"nodeType":"59","messageId":"60","endLine":1,"endColumn":25},{"ruleId":"57","severity":1,"message":"62","line":8,"column":21,"nodeType":"59","messageId":"60","endLine":8,"endColumn":31},{"ruleId":"57","severity":1,"message":"63","line":9,"column":21,"nodeType":"59","messageId":"60","endLine":9,"endColumn":31},{"ruleId":"57","severity":1,"message":"64","line":10,"column":21,"nodeType":"59","messageId":"60","endLine":10,"endColumn":31},{"ruleId":"57","severity":1,"message":"65","line":1,"column":10,"nodeType":"59","messageId":"60","endLine":1,"endColumn":14},{"ruleId":"57","severity":1,"message":"66","line":24,"column":21,"nodeType":"59","messageId":"60","endLine":24,"endColumn":33},{"ruleId":"67","severity":1,"message":"68","line":68,"column":6,"nodeType":"69","endLine":68,"endColumn":30,"suggestions":"70"},{"ruleId":"57","severity":1,"message":"71","line":1,"column":17,"nodeType":"59","messageId":"60","endLine":1,"endColumn":26},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"@typescript-eslint/no-unused-vars","'ProgressRing' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'setPdTimer' is assigned a value but never used.","'setSbTimer' is assigned a value but never used.","'setLbTimer' is assigned a value but never used.","'time' is defined but never used.","'setTotalTime' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'totalTime'. Either include it or remove the dependency array.","ArrayExpression",["74"],"'Component' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"75","fix":"76"},"Update the dependencies array to be: [elapsedTime, currState, totalTime]",{"range":"77","text":"78"},[2198,2222],"[elapsedTime, currState, totalTime]"]